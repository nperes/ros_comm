/*
 * security_module.h
 *
 *      Author: nmf
 */

#ifndef ROSCPP_SECURITY_MODULE_H_
#define ROSCPP_SECURITY_MODULE_H_

#include <boost/enable_shared_from_this.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/shared_array.hpp>
#include <boost/function.hpp>

#include <openssl/evp.h>

namespace ros {

class SecurityModule;
typedef boost::shared_ptr<SecurityModule> SecurityModulePtr;
//TODO(nmf) change return type to bool and discard success parameter
typedef boost::function<void(boost::shared_array<uint8_t>, size_t, bool)> PeerKeyRetrievedFunc;

// TODO(nmf) refactorings:
//	static generate default DH - no initialization -> pass callback with public key binded -> then call plain initialize
class SecurityModule: public boost::enable_shared_from_this<SecurityModule> {
public:
	SecurityModule();
	virtual ~SecurityModule();

	/**
	 * initDiffieHellman()
	 * initDH()
	 * setupDH()
	 * setup()
	 * initialize()
	 * initializeDH()
	 *
	 */

	/**
	 * \brief Generates a Diffie-Hellman (DH) key-pair and puts the public key
	 * and DH parameters into dh_public_key.
	 * Initialization is incomplete until until the DH peer-key is provided via
	 * peerKeyRetrievedFunction
	 *
	 * This method generates the DH key-pair from a predefined/agreed set of
	 * parameters and expects the DH peer key to have been generated using
	 * the same set of parameters.
	 *
	 * \params dh_public_key The public key as well as the parameters
	 * 		used to generate it, in .der encoding.
	 * \params dh_public_key_len Number of bytes in dh_public_key
	 * \params peerKeyRetrievedCallback Function to call when the DH peer key for
	 * 		becomes obtained.
	 */
	bool initialize(boost::shared_array<uint8_t> &dh_public_key,
	  size_t &dh_public_key_len,
	  PeerKeyRetrievedFunc &peerKeyRetrievedCallback);

	/**
	 * \brief Generates a Diffie-Hellman (DH) key-pair using the DH peer-key
	 * 	information provided by dh_peer_key, and puts the generated DH public key
	 * 	and associated DH parameters into dh_public_key. Initialization is
	 * 	complete.
	 *
	 * The DH shared secret is generated at this point, along with the keys used
	 * for encryption and HMAC generation.
	 *
	 * \params dh_public_key The public key as well as the parameters
	 * 		used to generate it, in .der format.
	 * \params dh_public_key_len Number of bytes in dh_public_key
	 * \params dh_peer_key The peer-key for this DH exchange, along with the
	 * 		DH parameters used to generate it, in DER format.
	 * \params dh_peer_key_len Number of bytes in dh_peer_key
	 */
	bool initialize(boost::shared_array<uint8_t> &dh_public_key,
	    size_t &dh_public_len, boost::shared_array<uint8_t> dh_peer_key,
	    size_t dh_peer_key_len);

	/**
	 *  \brief Encrypts plain_data and adds HMAC.
	 */
	bool secure(boost::shared_array<uint8_t> plain_data,
	    uint32_t plain_data_size, uint32_t plain_data_offset,
	    boost::shared_array<uint8_t> &secure_data, uint32_t &secure_data_size,
	    uint32_t secure_data_offset);

	/**
	 *\brief Retrieves encrypted data and asserts integrity.
	 */
	bool retrieve(boost::shared_array<uint8_t> secure_data,
	    uint32_t secure_data_size, uint32_t secure_data_offset,
	    boost::shared_array<uint8_t> &plain_data, uint32_t &plain_data_size,
	    uint32_t plain_data_offset);

private:

	/**
	 * \brief Sets internal state by generating a Diffie-Hellman (DH)
	 * public/private key-pair.
	 *
	 * The DH key-pair generated by this method uses a set of parameters built-in
	 * into openssl (in particular, the ones provided by DH_get_2048_256()).
	 */
	bool dhInitialize();

	/**
	 * \brief Sets internal state by generating a Diffie-Hellman (DH)
	 * public/private key-pair.
	 *
	 * The DH key-pair generated by this method uses the information provided
	 * by dh_peer_key, which contains a DH peer key in .der format. Both the
	 * DH public peer-key and DH parameters used to generate it must be encoded
	 * into dh_peer_key.
	 */
	bool dhInitialize(const uint8_t *dh_peer_key, uint32_t dh_peer_key_len);

	/**
	 * \brief Retrieves the set of DH parameters in dh_keys into dh_params.
	 */
	bool dhExtractParams(EVP_PKEY *dh_params, EVP_PKEY* &dh_keys);

	// TODO (nmf) document
	bool onPeerKeyReceived(boost::shared_array<uint8_t> peer_key,
	    size_t peer_key_len);

	// TODO(nmf) document
	bool dhSerialize(EVP_PKEY *dh_pkey,
	    boost::shared_array<uint8_t> &dh_key, size_t &dh_key_size);

	// TODO(nmf) document
	bool dhSetPeerKey();

	// TODO(nmf) document
	bool hkdfDeriveKey(const uint8_t *salt, size_t salt_size, const uint8_t *info,
	    size_t info_size, uint8_t *key, size_t key_size);

	// TODO(nmf) document
	bool hmacSha256Generate(const uint8_t *data, size_t data_size,
	    uint8_t *md_value, uint32_t &md_len);

	// TODO(nmf) document
	// TODO (nmf) pass args
	bool deriveSha256HmacKey();

	// TODO(nmf) document
	// TODO (nmf) pass args
	bool deriveAes256EncryptionKey();

	// TODO(nmf) document
	bool encrypt(uint8_t *plaintext, int plaintext_len, uint8_t *iv,
	    uint8_t *ciphertext, uint32_t &ciphertext_len);

	// TODO(nmf) document
	bool decrypt(uint8_t *ciphertext, uint32_t ciphertext_len, uint8_t *iv,
	    uint8_t *plaintext, uint32_t &plaintext_len);


	// when set, dh_shared_secret_ptr will be set
	bool is_initialized;
	// diffie-hellman keys
	EVP_PKEY *dh_keys_;
	// secret derived as a result of DH key exchange
	uint8_t *dh_secret_;
	// TODO (nmf) delete and use sizeof dh_secret as array
	size_t dh_secret_size_;
	uint8_t *hmac_key_;
	// TODO (nmf) delete and use sizeof dh_secret as array
	size_t hmac_key_size_;
	//EVP_PKEY *hmac_key_;
	uint8_t *encryption_key_;
	// TODO (nmf) delete and use sizeof dh_secret as array
	size_t encryption_key_size_;
	// TODO(nmf) get rid of this, just a tmp value, no value in keeping
	EVP_PKEY *dh_public_peer_key_;
};

} //namespace ros

#endif /* ROS_COMM_CLIENTS_ROSCPP_INCLUDE_ROS_SECURITY_SECURITY_MODULE_H_ */
